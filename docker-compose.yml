version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: symptom_checker_db
    environment:
      POSTGRES_DB: symptom_checker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - symptom_checker_network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: symptom_checker_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - symptom_checker_network

  # Healthcare Symptom Checker API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: symptom_checker_api
    environment:
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: symptom_checker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      
      # API Keys (set these in .env file)
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GROQ_API_KEY: ${GROQ_API_KEY}
      
      # Application
      DEBUG: false
      LOG_LEVEL: INFO
      
      # Security
      ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:8000,http://127.0.0.1:3000,http://127.0.0.1:8000"
      
      # Rate Limiting
      RATE_LIMIT_REQUESTS: 100
      RATE_LIMIT_WINDOW: 3600
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./chroma_db:/app/chroma_db
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - symptom_checker_network
    restart: unless-stopped

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: symptom_checker_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - symptom_checker_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  symptom_checker_network:
    driver: bridge
